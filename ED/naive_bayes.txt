
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df=pd.read_csv('Social_Network_Ads.csv')
df
User ID	Gender	Age	EstimatedSalary	Purchased
0	15624510	Male	19	19000	0
1	15810944	Male	35	20000	0
2	15668575	Female	26	43000	0
3	15603246	Female	27	57000	0
4	15804002	Male	19	76000	0
...	...	...	...	...	...
395	15691863	Female	46	41000	1
396	15706071	Male	51	23000	1
397	15654296	Female	50	20000	1
398	15755018	Male	36	33000	0
399	15594041	Female	49	36000	1
400 rows Ã— 5 columns

Explore Dataset
df.head()
User ID	Gender	Age	EstimatedSalary	Purchased
0	15624510	Male	19	19000	0
1	15810944	Male	35	20000	0
2	15668575	Female	26	43000	0
3	15603246	Female	27	57000	0
4	15804002	Male	19	76000	0
df.tail()
User ID	Gender	Age	EstimatedSalary	Purchased
395	15691863	Female	46	41000	1
396	15706071	Male	51	23000	1
397	15654296	Female	50	20000	1
398	15755018	Male	36	33000	0
399	15594041	Female	49	36000	1
df.describe
<bound method NDFrame.describe of       User ID  Gender  Age  EstimatedSalary  Purchased
0    15624510    Male   19            19000          0
1    15810944    Male   35            20000          0
2    15668575  Female   26            43000          0
3    15603246  Female   27            57000          0
4    15804002    Male   19            76000          0
..        ...     ...  ...              ...        ...
395  15691863  Female   46            41000          1
396  15706071    Male   51            23000          1
397  15654296  Female   50            20000          1
398  15755018    Male   36            33000          0
399  15594041  Female   49            36000          1

[400 rows x 5 columns]>
df.info()
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 400 entries, 0 to 399
Data columns (total 5 columns):
 #   Column           Non-Null Count  Dtype 
---  ------           --------------  ----- 
 0   User ID          400 non-null    int64 
 1   Gender           400 non-null    object
 2   Age              400 non-null    int64 
 3   EstimatedSalary  400 non-null    int64 
 4   Purchased        400 non-null    int64 
dtypes: int64(4), object(1)
memory usage: 15.8+ KB
df.dtypes
User ID             int64
Gender             object
Age                 int64
EstimatedSalary     int64
Purchased           int64
dtype: object
df.isnull().sum()
User ID            0
Gender             0
Age                0
EstimatedSalary    0
Purchased          0
dtype: int64
df.duplicated().sum()
0
mapi={'Male':1,'Female':0}
df=df.replace(mapi)
df.head()
User ID	Gender	Age	EstimatedSalary	Purchased
0	15624510	1	19	19000	0
1	15810944	1	35	20000	0
2	15668575	0	26	43000	0
3	15603246	0	27	57000	0
4	15804002	1	19	76000	0
df.drop(['User ID'],axis=1, inplace=True)
df.head()
Gender	Age	EstimatedSalary	Purchased
0	1	19	19000	0
1	1	35	20000	0
2	0	26	43000	0
3	0	27	57000	0
4	1	19	76000	0
Train test split
x,y=df.drop(['Purchased'],axis=1),df['Purchased']
from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.25,random_state=0)
Standard scaler
from sklearn.preprocessing import StandardScaler
sc_scale=StandardScaler()

xtrain=sc_scale.fit_transform(xtrain)
xtest=sc_scale.transform(xtest)
from sklearn.naive_bayes import GaussianNB
classifier=GaussianNB()
classifier.fit(xtrain,ytrain)
GaussianNB()
In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook.
On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.
y_pred=classifier.predict(xtest)
confusion matrix
from sklearn.metrics import confusion_matrix
cm=confusion_matrix(ytest,y_pred)

print("Confusion matrix is : \n",cm)
Confusion matrix is : 
 [[66  2]
 [ 7 25]]
import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(cm,annot=True)
plt.show()

Accuracy and score
from sklearn.metrics import accuracy_score
print("Accuracy :", accuracy_score(ytest,y_pred)*100,'%')
Accuracy : 91.0 %
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
#precision  tp/(tp+fp)
precision=precision_score(ytest,y_pred)
print('Precision: %f' % precision)
#recall  tp/(tp+fn)
recall=recall_score(ytest,y_pred)
print('recall: %f' % recall)
#precision  2tp/(2tp+fp+fn)
f1=f1_score(ytest,y_pred)
print('f1: %f' % f1)
Precision: 0.925926
recall: 0.781250
f1: 0.847458
 